
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kuntur_api
    ports:
      - "5170:5170"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5170
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=kuntur;Username=postgres;Password=postgres
      - Identity__Keycloak__BaseUrl=http://keycloak:8080
      - OTLP_Endpoint=http://otel-collector:4317
      - RiskEvaluator__Url=http://risk_evaluator:5122
    depends_on:
      - postgres
      - keycloak
    networks:
      - kuntur_network
  risk_evaluator:
    build:
      context: .
      dockerfile: Dockerfile.risk_evaluator
    container_name: kuntur_risk_evaluator_api
    ports:
      - "5122:5122"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5122
      - OTLP_Endpoint=http://otel-collector:4317
    networks:
      - kuntur_network
  postgres:
    image: postgres:16
    container_name: kuntur_db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - kuntur_network
  keycloak:
    platform: linux/amd64
    image: quay.io/phasetwo/phasetwo-keycloak:26.2.3
    container_name: keycloak
    command:
      - start-dev
      - --features
      - organization
      - --import-realm
      - --spi-email-template-provider=freemarker-plus-mustache 
      - --spi-email-template-freemarker-plus-mustache-enabled=true 
      - --spi-theme-cache-themes=false

    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_LOG_LEVEL: info
      PHASETWO_ANALYTICS_DISABLED: "true"
    volumes:
      - ./config/keycloak/kuntur.json:/opt/keycloak/data/import/kuntur.json
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kuntur_network
  jaeger:
    image: jaegertracing/all-in-one:1.58.0
    ports:
      - "16686:16686" # Jaeger Web UI
      # - "4317:4317" # OTLP 
    networks:
      - kuntur_network
  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/rules.yml:/etc/prometheus/rules.yml
    command:
      - '--config.file=/etc/prometheus/rules.yml'
    networks:
      - kuntur_network    
  grafana:
    image: grafana/grafana:10.4.4
    volumes:
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    ports:
      - "3000:3000"
    networks:
      - kuntur_network
  loki:
    image: grafana/loki:2.7.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - kuntur_network
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.103.0
    volumes:
      - ./config/otel-collector/config.yml:/etc/otel/config.yaml
    command: --config /etc/otel/config.yaml
    environment:
      JAEGER_ENDPOINT: "jaeger:4317"
    ports:
      - "8889:8889"   # Prometheus metrics exporter (scrape endpoint)
      - "13133:13133" # health_check extension
      - "55679:55679" # ZPages extension
      - "4317:4317"   # OTLP Receiver
    depends_on:
      - jaeger
      - prometheus
      - loki
    networks:
      - kuntur_network

volumes:
  postgres_data:

networks:
  kuntur_network:
    driver: bridge